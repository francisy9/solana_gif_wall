use anchor_lang::prelude::*; // Import anchor anchor tools


// PID for security, first generated by anchor init 
declare_id!("BZbxcrhYCNiuc15gebyVreHMRyYeWwr6PmDy5xrDaD4p"); 

#[program] // Tells front end that below are instruction handlers; entry points to program that clients may invoke
pub mod myepicproject { // mod is similar to a class
    use super::*;
    // First parameter of every RPC handler is the context struct -> container for the currently executing pid generic over accounts -- ie the StartStuffOff struct
    pub fn start_stuff_off(ctx: Context<StartStuffOff>, base_account_bump: u8) -> ProgramResult {
        ctx.accounts.base_account.bump = base_account_bump;
        Ok(())
    }

    // Function to add gif url
    pub fn add_gif(ctx: Context<AddGif>, gif_url: String) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        let user = &mut ctx.accounts.user;
        let gif_item = GifItem {
            gif_link: gif_url,
            user_address: *user.to_account_info().key,
            id: base_account.total_gifs,
            vote: 0,
        };
        base_account.total_gifs += 1;
        base_account.gif_list.push(gif_item);
        Ok(())
    }

    // Function that upvotes
    pub fn up_vote(ctx: Context<UpVote>, id: u32) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        let gif = &mut base_account.gif_list[id as usize];
        gif.vote += 1;
        Ok(())
    }

    pub fn down_vote(ctx: Context<DownVote>, id: u32) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        let gif = &mut base_account.gif_list[id as usize];
        gif.vote -= 1;
        Ok(())
    }

    pub fn send_sol(ctx: Context<SendSol>, amount_str: String) -> ProgramResult {
        let amount = amount_str.parse::<u64>().unwrap();
        let ix = anchor_lang::solana_program::system_instruction::transfer(
            &ctx.accounts.from.key(),
            &ctx.accounts.to.key(),
            amount, 
        );
        anchor_lang::solana_program::program::invoke(
            &ix,
            &[
                ctx.accounts.from.to_account_info(),
                ctx.accounts.to.to_account_info(),
            ],
        )
    }
}

// Marks a struct containing all accounts that must be specified for a given instruction (aka Contexts)
#[derive(Accounts)] // Specify different account constraints
#[instruction(base_account_bump: u8)]
pub struct StartStuffOff<'info> {
    // Tell solana how we want to initialize BaseAccount
    #[account(init, payer = user, space = 9000, seeds = [b"base=_account".as_ref()], bump = base_account_bump)]
    pub base_account: Account<'info, BaseAccount>,
    #[account(mut)]
    pub user: Signer<'info>, // Data passed into program that the user calling this program actually owns their wallet account
    pub system_program: Program <'info, System> // Reference to solana system program
}

#[derive(Accounts)]
pub struct AddGif<'info> {
    #[account(mut, seeds = [b"base_account".as_ref()], bump = base_account.bump)]
    pub base_account: Account<'info, BaseAccount>,
    pub user: Signer<'info>,
}

#[derive(Accounts)]
pub struct UpVote<'info> {
    #[account(mut, seeds = [b"base_account".as_ref()], bump = base_account.bump)]
    pub base_account: Account<'info, BaseAccount>,
}

#[derive(Accounts)]
pub struct DownVote<'info> {
    #[account(mut, seeds = [b"base_account".as_ref()], bump = base_account.bump)]
    pub base_account: Account<'info, BaseAccount>
}

#[derive(Accounts)]
pub struct SendSol<'info> {
    #[account(mut)]
    from: Signer<'info>,
    #[account(mut)]
    to: AccountInfo<'info>,
    system_program: Program<'info, System>,
}

// Struct to store gif items
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
pub struct GifItem {
    pub gif_link: String,
    pub user_address: Pubkey,
    pub id: u64,
    pub vote: i16,
}

// Account struct
#[account] 
#[derive(Default)]
pub struct BaseAccount {
    pub total_gifs: u64,
    pub gif_list: Vec<GifItem>,
    pub bump: u8,
} 